{
	"info": {
		"_postman_id": "99aa42f3-9af8-4248-b374-c5e74f603fcc",
		"name": "laravel_challenge_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24046120"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData.data).to.have.property('name');\r",
							"    pm.expect(responseData.data).to.have.property('email');\r",
							"    pm.expect(responseData.data).to.have.property('updated_at');\r",
							"    pm.expect(responseData.data).to.have.property('created_at');\r",
							"    pm.expect(responseData.data).to.have.property('id');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name and email are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(responseData.data.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data object is present in the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.have.property('data');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Menar Selamet\",\r\n    \"email\": \"menar@menar.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/register",
				"description": "### Register User\n\nThis endpoint is used to register a new user.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `password` (string, required): The password for the user account.\n    \n\n#### Response (application/json)\n\nThe response will be a JSON object with the following properties:\n\n- `message` (string): A message indicating the outcome of the registration process.\n    \n- `data` (object): An object containing the user details.\n    \n    - `name` (string): The name of the registered user.\n        \n    - `email` (string): The email address of the registered user.\n        \n    - `updated_at` (string): The date and time when the user details were last updated.\n        \n    - `created_at` (string): The date and time when the user account was created.\n        \n    - `id` (integer): The unique identifier for the registered user.\n        \n\n#### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": { \"type\": \"string\" },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"email\": { \"type\": \"string\" },\n        \"updated_at\": { \"type\": \"string\" },\n        \"created_at\": { \"type\": \"string\" },\n        \"id\": { \"type\": \"integer\" }\n      }\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for status, message, and token fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status field is a boolean\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.status).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"menar@menar.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/login",
				"description": "### Login\n\nThis endpoint is used to authenticate a user and obtain a token for accessing protected resources.\n\n**Request Body**\n\n- email (text, required): The email of the user.\n    \n- password (text, required): The password of the user.\n    \n\n**Response**\n\n- status (boolean): Indicates the status of the authentication.\n    \n- message (string): A message related to the authentication status.\n    \n- token (string): A token for accessing protected resources.\n    \n\nExample:\n\n``` json\n{\n    \"status\": true,\n    \"message\": \"\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - data, user\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData).to.have.property('user');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data object is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.data.marketplace).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.data.username).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.data.password).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.data.updated_at).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.data.created_at).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User object is valid\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData.user).to.exist;\r",
							"  pm.expect(responseData.user).to.be.an('object');\r",
							"  pm.expect(responseData.user.id).to.be.a('number');\r",
							"  pm.expect(responseData.user.name).to.be.a('string');\r",
							"  pm.expect(responseData.user.email).to.be.a('string');\r",
							"  pm.expect(responseData.user.email_verified_at).to.be.null;\r",
							"  pm.expect(responseData.user.created_at).to.be.a('string');\r",
							"  pm.expect(responseData.user.updated_at).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiNjZmYmU0OTM1OTY2YWY3OWNjZDk0NmFiZTczOTE0ZWY0ZWM3NzllMzRkMzYwNzc1ZTk0ZGUzNTI1ZWYyOWEzZGM3NDM0OTYxNTk3NWIwMTUiLCJpYXQiOjE3MjQyNTkxMzYuNTg5ODM4LCJuYmYiOjE3MjQyNTkxMzYuNTg5ODQxLCJleHAiOjE3NTU3OTUxMzYuNTcyNDE0LCJzdWIiOiIxNSIsInNjb3BlcyI6W119.VfMPQs-SQ7MGLQokIrrGTh6i60wt3upYiys30hWN2HDsyMddu-S7rJxR1YIGWJW2Ytl3V1ZzkHqJdJS65K53MkQtYxhkNg_3q-kNQTBylQzbJ6TouWigFDFgEfrpDmsWMC4l7-0zQ-B2ZgbvMN0yDDIbSD9l9d6uSR6yrFRIMaUUayiUITN0QpP8n-7e1V5nfCFiTnjV0rk4xwtuGDBT3GoErw3RCnkZat_IUCeSmIHAtn9TvNiyBkL0jEzUukNPdVWkfozCf9GUvXmYP6GFlZJ1BYVbtT3SrFC_1h6nZq3uiLaN8woe20nwmrGV2sVpFsYpvfBSHgJzuBAJ6Y2k6fvtDM82fJcJ67HqWKcSHBCly3NQI118lMbSF8tTb9QgimcIvlDRyKbSVldYBdVg1AA9AmkHgeCxqwQSz81xRDMuhO_pxIAf-3QBB9XwFDcsL0ubLqvPI_krb_6Zbl2Qb4G_k-tgdX1XAgcC8XnmqeyZL2IOB2bzNr--J4KlEOKi94-HAXU-3P6r_6bxyZBMBv_ydKW0EnfYebTzzJzYD1RQFB1_EYB1ljqZIjZYxCDkLRGoIN9_ld6Qv3Slsa-Ki4Cxgn7SBXvBOP-KbHUaTVTlFSq57_INMv1JLyQIgx0E6c0OGyrDukK_IsYQs0IaweQ2jJuOsT64u4V2Xnn3WJE"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"marketplace\": \"n11\",\r\n    \"username\": \"Menar Selamet\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/integrations",
				"description": "### Create Integration\n\nThis endpoint allows the user to create integrations for a marketplace.\n\n#### Request Body\n\n- `marketplace` (string, required): The name of the marketplace for the integration.\n    \n- `username` (string, required): The username for the integration.\n    \n- `password` (string, required): The password for the integration.\n    \n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"data\": {\n    \"marketplace\": \"string\",\n    \"username\": \"string\",\n    \"password\": \"string\",\n    \"updated_at\": \"string\",\n    \"created_at\": \"string\",\n    \"id\": 0\n  },\n  \"user\": {\n    \"id\": 0,\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"email_verified_at\": \"string|null\",\n    \"created_at\": \"string\",\n    \"updated_at\": \"string\"\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    \r",
							"    const data = responseData.data;\r",
							"    pm.expect(data).to.have.property('id');\r",
							"    pm.expect(data).to.have.property('marketplace');\r",
							"    pm.expect(data).to.have.property('username');\r",
							"    pm.expect(data).to.have.property('password');\r",
							"    pm.expect(data).to.have.property('created_at');\r",
							"    pm.expect(data).to.have.property('updated_at');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiNjZmYmU0OTM1OTY2YWY3OWNjZDk0NmFiZTczOTE0ZWY0ZWM3NzllMzRkMzYwNzc1ZTk0ZGUzNTI1ZWYyOWEzZGM3NDM0OTYxNTk3NWIwMTUiLCJpYXQiOjE3MjQyNTkxMzYuNTg5ODM4LCJuYmYiOjE3MjQyNTkxMzYuNTg5ODQxLCJleHAiOjE3NTU3OTUxMzYuNTcyNDE0LCJzdWIiOiIxNSIsInNjb3BlcyI6W119.VfMPQs-SQ7MGLQokIrrGTh6i60wt3upYiys30hWN2HDsyMddu-S7rJxR1YIGWJW2Ytl3V1ZzkHqJdJS65K53MkQtYxhkNg_3q-kNQTBylQzbJ6TouWigFDFgEfrpDmsWMC4l7-0zQ-B2ZgbvMN0yDDIbSD9l9d6uSR6yrFRIMaUUayiUITN0QpP8n-7e1V5nfCFiTnjV0rk4xwtuGDBT3GoErw3RCnkZat_IUCeSmIHAtn9TvNiyBkL0jEzUukNPdVWkfozCf9GUvXmYP6GFlZJ1BYVbtT3SrFC_1h6nZq3uiLaN8woe20nwmrGV2sVpFsYpvfBSHgJzuBAJ6Y2k6fvtDM82fJcJ67HqWKcSHBCly3NQI118lMbSF8tTb9QgimcIvlDRyKbSVldYBdVg1AA9AmkHgeCxqwQSz81xRDMuhO_pxIAf-3QBB9XwFDcsL0ubLqvPI_krb_6Zbl2Qb4G_k-tgdX1XAgcC8XnmqeyZL2IOB2bzNr--J4KlEOKi94-HAXU-3P6r_6bxyZBMBv_ydKW0EnfYebTzzJzYD1RQFB1_EYB1ljqZIjZYxCDkLRGoIN9_ld6Qv3Slsa-Ki4Cxgn7SBXvBOP-KbHUaTVTlFSq57_INMv1JLyQIgx0E6c0OGyrDukK_IsYQs0IaweQ2jJuOsT64u4V2Xnn3WJE"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"marketplace\": \"trendyol\",\r\n    \"username\" : \"Menar\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/integrations/id",
				"description": "### Update Integration\n\nThis endpoint is used to update an integration with the specified ID.\n\n#### Request Body\n\n- `marketplace` (string, optional): The name of the marketplace.\n    \n- `username` (string, optional): The username for the integration.\n    \n- `password` (string, optional): The password for the integration.\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"data\": {\n    \"id\": 0,\n    \"marketplace\": \"\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"created_at\": \"\",\n    \"updated_at\": \"\"\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiNjZmYmU0OTM1OTY2YWY3OWNjZDk0NmFiZTczOTE0ZWY0ZWM3NzllMzRkMzYwNzc1ZTk0ZGUzNTI1ZWYyOWEzZGM3NDM0OTYxNTk3NWIwMTUiLCJpYXQiOjE3MjQyNTkxMzYuNTg5ODM4LCJuYmYiOjE3MjQyNTkxMzYuNTg5ODQxLCJleHAiOjE3NTU3OTUxMzYuNTcyNDE0LCJzdWIiOiIxNSIsInNjb3BlcyI6W119.VfMPQs-SQ7MGLQokIrrGTh6i60wt3upYiys30hWN2HDsyMddu-S7rJxR1YIGWJW2Ytl3V1ZzkHqJdJS65K53MkQtYxhkNg_3q-kNQTBylQzbJ6TouWigFDFgEfrpDmsWMC4l7-0zQ-B2ZgbvMN0yDDIbSD9l9d6uSR6yrFRIMaUUayiUITN0QpP8n-7e1V5nfCFiTnjV0rk4xwtuGDBT3GoErw3RCnkZat_IUCeSmIHAtn9TvNiyBkL0jEzUukNPdVWkfozCf9GUvXmYP6GFlZJ1BYVbtT3SrFC_1h6nZq3uiLaN8woe20nwmrGV2sVpFsYpvfBSHgJzuBAJ6Y2k6fvtDM82fJcJ67HqWKcSHBCly3NQI118lMbSF8tTb9QgimcIvlDRyKbSVldYBdVg1AA9AmkHgeCxqwQSz81xRDMuhO_pxIAf-3QBB9XwFDcsL0ubLqvPI_krb_6Zbl2Qb4G_k-tgdX1XAgcC8XnmqeyZL2IOB2bzNr--J4KlEOKi94-HAXU-3P6r_6bxyZBMBv_ydKW0EnfYebTzzJzYD1RQFB1_EYB1ljqZIjZYxCDkLRGoIN9_ld6Qv3Slsa-Ki4Cxgn7SBXvBOP-KbHUaTVTlFSq57_INMv1JLyQIgx0E6c0OGyrDukK_IsYQs0IaweQ2jJuOsT64u4V2Xnn3WJE"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/integrations/id",
				"description": "### Delete Integration by ID\n\nThis endpoint is used to delete a specific integration by its ID.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response contains a `message` key which provides information about the result of the deletion operation."
			},
			"response": []
		}
	]
}